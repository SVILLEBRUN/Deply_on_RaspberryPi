# Docker Compose pour un environnement de développement

networks:
    my-apps-network:
        driver: bridge


services:
    nginx:
      image: nginx:latest
      container_name: nginx
      ports:
          - "80:80"
      restart: always
      volumes:
          - ./nginx_dev.conf:/etc/nginx/conf.d/default.conf
          - ./index.html:/usr/share/nginx/html/index.html
      networks:
          - my-apps-network
    
    proxy:
      container_name: proxy
      build:
          context: ../proxy
          target: 'development-stage'
      ports:
          - "5000"
      restart: always
      volumes:
          - ../proxy:/app
      networks:
          - my-apps-network

    movie-db-vue:
        container_name: movie-db-vue
        build:
            context: ../Movie_db_app/movie-db-vue
            target: 'development-stage'
        ports:
            - "8080:8080" # En développement, on expose le port 8080 mais pas en production
        restart: always
        volumes:
            - ../Movie_db_app/movie-db-vue:/app
        command: /bin/sh -c "npm install && quasar dev"
        networks:
            - my-apps-network

    movie-db-core-api:
        container_name: movie-db-core-api
        build:
            context: ../Movie_db_app/movie-db-core-api
            target: 'development-stage'
        ports:
            - "3000"
        restart: always
        volumes:
            - ../Movie_db_app/movie-db-core-api:/app
        environment:
            - DATABASE_URL=${DATABASE_URL_MDB}
        networks:
            - my-apps-network
    
    airjewels-db:
        image: postgres:latest
        container_name: airjewels-db
        restart: always
        volumes:
            - airjewels-dev-db-data:/var/lib/postgresql/data
        ports:
            - "5432:5432"
        networks:
            - my-apps-network
        env_file:
            - .env

    airjewels-rails:
        container_name: airjewels-rails
        build:
            context: ../airjewels-rails
            dockerfile: dev.Dockerfile
        command: bundle exec rails s -b '0.0.0.0' -p 3001
        ports:
            - "3001:3001"
        depends_on:
            - airjewels-db
        restart: always
        volumes:
            - ../airjewels-rails:/rails    # Only for development
            - airjewels-dev-app-storage:/rails/storage
        networks:
            - my-apps-network
        environment:
            - POSTGRES_USER=${POSTGRES_USER_AIRJEWELS}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD_AIRJEWELS}
        env_file:
            - .env

    academint-db:
        image: postgres:latest
        container_name: academint-db
        restart: always
        volumes:
            - academint-dev-db-data:/var/lib/postgresql/data
        ports:
            - "5433:5433"
        networks:
            - my-apps-network
        environment:
            - POSTGRES_USER=${POSTGRES_USER_ACADEMINT}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD_ACADEMINT}
        env_file:
            - .env

    academint:
        container_name: academint
        build:
            context: ../Academint
            dockerfile: dev.Dockerfile
        command: bundle exec rails s -b '0.0.0.0' -p 3002
        ports:
            - "3002:3002"
        depends_on:
            - academint-db
        restart: always
        volumes:
            - ../academint:/rails    # Only for development
            - academint-dev-app-storage:/rails/storage
        networks:
            - my-apps-network
        env_file:
            - .env


volumes:
    airjewels-dev-db-data:
        name: airjewels-dev-db-data
    airjewels-dev-app-storage: 
        name: airjewels-dev-app-storage
    academint-dev-db-data:
        name: academint-dev-db-data
    academint-dev-app-storage: 
        name: academint-dev-app-storage